on: [push]

name: Deploy to Amazon ECS

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Set selected color
      id: env
      env:
        NAME: podplayadmin-test-dev
      run: |
        echo '::set-env name=ECR_REPOSITORY::$NAME'
        echo '::set-output name=ECR_REPOSITORY::$NAME'

    - name: Checkout
      uses: actions/checkout@v2

    - name: Notify slack start
      id: slack-start
      uses: mahlstrom/actions2slack@v6
      with:
        github-run-id: $GITHUB_RUN_ID
        status: 'STARTED'
        slack-token: ${{ secrets.SLACK_TOKEN }}
        slack-channel: 'bottest'
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#        ECR_REPOSITORY: $WS_NAME
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ steps.env.outputs.ECR_REPOSITORY }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Print result
      id: ress
      env:
        THEOUT: ${{ steps.task-def.outputs.task-definition }}
      run: |
        echo $THEOUT
        cat $THEOUT
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ steps.env.outputs.ECR_REPOSITORY }}-service
        cluster: ${{ steps.env.outputs.ECR_REPOSITORY }}
        wait-for-service-stability: true
    - name: Slack if success
      id: slack-success
      uses: mahlstrom/actions2slack@v6
      with:
        github-run-id: $GITHUB_RUN_ID
        status: 'SUCCEEDED'
        slack-token: ${{ secrets.SLACK_TOKEN }}
        slack-channel: 'bottest'

    - name: Slack if failed
      if: ${{ failure() }}
      id: slack-failed
      uses: mahlstrom/actions2slack@v6
      with:
        github-run-id: $GITHUB_RUN_ID
        status: 'FAILED'
        slack-token: ${{ secrets.SLACK_TOKEN }}
        slack-channel: 'bottest'
